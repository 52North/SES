<?xml version="1.0" encoding="UTF-8"?>
<!-- This OGC work (including software, documents, or other related items) is being
provided by the copyright holders under the following license. By obtaining,
using and/or copying this work, you (the licensee) agree that you have read,
understood, and will comply with the following terms and conditions:

Permission to use, copy, and modify this software and its documentation, with
or without modification, for any purpose and without fee or royalty is hereby
granted, provided that you include the following on ALL copies of the software
and documentation or portions thereof, including modifications, that you make:

   1. The full text of this NOTICE in a location viewable to users of the
   redistributed or derivative work.
   2. Any pre-existing intellectual property disclaimers, notices, or terms
   and conditions. If none exist, a short notice of the following form (hypertext
   is preferred, text is permitted) should be used within the body of any
   redistributed or derivative code: "Copyright Â© [$date-of-document] Open
   Geospatial Consortium, Inc. All Rights Reserved.
   http://www.opengeospatial.org/ogc/legal (Hypertext is preferred, but a textual
   representation is permitted.)
   3. Notice of any changes or modifications to the OGC files, including the
   date changes were made. (We recommend you provide URIs to the location from
   which the code is derived.)
 

THIS SOFTWARE AND DOCUMENTATION IS PROVIDED "AS IS," AND COPYRIGHT HOLDERS MAKE
NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
TO, WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT
THE USE OF THE SOFTWARE OR DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY PATENTS,
COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.

COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR DOCUMENTATION.

The name and trademarks of copyright holders may NOT be used in advertising or
publicity pertaining to the software without specific, written prior permission.
Title to copyright in this software and any associated documentation will at all
times remain with copyright holders.


CHANGES TO ORIGINAL FILE (derived from http://schemas.opengeospatial.net):
xsd:import's and xsd:include's changed to local one-folder-hierarchy -->
<schema xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:gml="http://www.opengis.net/gml" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:om="http://www.opengis.net/om/1.0" xmlns:omx="http://www.opengis.net/omx/1.0" xmlns:swe="http://www.opengis.net/swe/1.0.1" xmlns:sch="http://purl.oclc.org/dsdl/schematron" targetNamespace="http://www.opengis.net/omx/1.0" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.0.0">
  <annotation>
    <appinfo source="urn:ogc:specification:om:doc-is(07-022r3):1.0.0">
      <sch:title>Schematron validation</sch:title>
      <sch:ns prefix="gml" uri="http://www.opengis.net/gml"/>
      <sch:ns prefix="omx" uri="http://www.opengis.net/omx/1.0"/>
      <sch:ns prefix="om" uri="http://www.opengis.net/om/1.0"/>
      <sch:ns prefix="swe" uri="http://www.opengis.net/swe/1.0.1"/>
      <sch:ns prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/>
      <sch:ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance"/>
    </appinfo>
    <documentation>observationSpecialization.xsd An implementation of the OandM model for SWE
			This document contains various specializations of the basic observation pattern, by
			fixing the type of the result. The specialization is achieved by using Schematron to
			constrain the type of the result element from om:ObservationType Copyright (c) 2008 Open
			Geospatial Consortium - see http://www.opengeospatial.org/ogc/software</documentation>
  </annotation>
  <!-- ====================================================================== -->
  <!-- bring in other schemas -->
  <import namespace="http://www.opengis.net/gml" schemaLocation="OGC-GML-3_1_1-gml.xsd"/>
  <import namespace="http://www.opengis.net/swe/1.0.1" schemaLocation="OGC-SWE-1_0_1-swe.xsd"/>
  <import namespace="http://www.opengis.net/om/1.0" schemaLocation="OGC-OM-1_0_0-om.xsd"/>
  <!-- ====================================================================== -->
  <!-- ====================================================================== -->
  <!-- ===== Scalar Observations ====== -->
  <!-- ====================================================================== -->
  <element name="Measurement" type="om:ObservationType" substitutionGroup="om:Observation">
    <annotation>
      <appinfo>
        <sch:pattern>
          <sch:title>result type must be gml:MeasureType</sch:title>
          <sch:rule context="//omx:Measurement">
            <sch:assert test="om:result/@xsi:type='gml:MeasureType' ">xsi:Type must be
							gml:MeasureType</sch:assert>
          </sch:rule>
        </sch:pattern>
      </appinfo>
      <documentation>Specialized Observation in which the result is a Measure</documentation>
    </annotation>
  </element>
  <!-- ====================================================================== -->
  <element name="CategoryObservation" type="om:ObservationType" substitutionGroup="om:Observation">
    <annotation>
      <appinfo>
        <sch:pattern>
          <sch:title>result type must be gml:CodeType</sch:title>
          <sch:rule context="//omx:CategoryObservation">
            <sch:assert test="om:result/@xsi:type='swe:ScopedNameType' ">xsi:Type must
							be swe:ScopedNameType</sch:assert>
          </sch:rule>
        </sch:pattern>
      </appinfo>
      <documentation>Specialized Observation, in which the result is a textual value from a
				controlled vocabulary</documentation>
    </annotation>
  </element>
  <!-- ====================================================================== -->
  <element name="CountObservation" type="om:ObservationType" substitutionGroup="om:Observation">
    <annotation>
      <appinfo>
        <sch:pattern>
          <sch:title>result type must be xs:intege</sch:title>
          <sch:rule context="//omx:CountObservation">
            <sch:assert test="om:result/@xsi:type='xs:integer' ">xsi:Type must be
							xs:integer</sch:assert>
          </sch:rule>
        </sch:pattern>
      </appinfo>
      <documentation>Specialized Observation, in which the result is an integer representing
				the count of the observed property</documentation>
    </annotation>
  </element>
  <!-- ====================================================================== -->
  <element name="TruthObservation" type="om:ObservationType" substitutionGroup="om:Observation">
    <annotation>
      <appinfo>
        <sch:pattern>
          <sch:title>result type must be xs:boolean</sch:title>
          <sch:rule context="//omx:TruthObservation">
            <sch:assert test="om:result/@xsi:type='xs:boolean' ">xsi:Type must be
							xs:boolean</sch:assert>
          </sch:rule>
        </sch:pattern>
      </appinfo>
      <documentation>Specialized Observation, in which the result is a boolean value
				representing the truth value (usually existence) of the observed
			property</documentation>
    </annotation>
  </element>
  <!-- ====================================================================== -->
  <element name="GeometryObservation" type="om:ObservationType" substitutionGroup="om:Observation">
    <annotation>
      <appinfo>
        <sch:pattern>
          <sch:title>result must contain a gml:_Geometry and nothing else</sch:title>
          <sch:rule context="//omx:GeometryObservation">
            <sch:assert test="om:result/gml:_Geometry">gml:_Geometry must be present as
							child of om:result</sch:assert>
            <sch:assert test="count(om:result/*) = 1">only one child may be
						present</sch:assert>
          </sch:rule>
        </sch:pattern>
      </appinfo>
      <documentation>Specialized Observation, in which the result is a
			geometry</documentation>
    </annotation>
  </element>
  <!-- ====================================================================== -->
  <element name="TemporalObservation" type="om:ObservationType" substitutionGroup="om:Observation">
    <annotation>
      <appinfo>
        <sch:pattern>
          <sch:title>result must contain a gml:_TimeObject and nothing else</sch:title>
          <sch:rule context="//omx:TemporalObservation">
            <sch:assert test="om:result/gml:_TimeObject">gml:_TimeObject must be present
							as child of om:result</sch:assert>
            <sch:assert test="count(om:result/*) = 1">only one child may be
						present</sch:assert>
          </sch:rule>
        </sch:pattern>
      </appinfo>
      <documentation>Specialized Observation, in which the result is a temporal
			object</documentation>
    </annotation>
  </element>
  <!-- ====================================================================== -->
  <!-- ===== Observation with constant complex result ====== -->
  <!-- ====================================================================== -->
  <element name="ComplexObservation" type="om:ObservationType" substitutionGroup="om:Observation">
    <annotation>
      <appinfo>
        <sch:pattern>
          <sch:title>result must contain a swe:Record and nothing else</sch:title>
          <sch:rule context="//omx:ComplexObservation">
            <sch:assert test="om:result/swe:DataRecord">swe:DataRecord must be present
							as child of om:result</sch:assert>
            <sch:assert test="count(om:result/*) = 1">only one child may be
						present</sch:assert>
          </sch:rule>
        </sch:pattern>
      </appinfo>
      <documentation>Specialized Observation, in which the result is a record representing a
				multi-component phenomenon</documentation>
    </annotation>
  </element>
  <!-- ====================================================================== -->
  <!-- ===== Observation with SweCommon data types as result ====== -->
  <!-- ====================================================================== -->
  <!--	<element name="CommonObservation" type="om:ObservationType" substitutionGroup="om:Observation">
		<annotation>
			<appinfo>
				<sch:pattern>
					<sch:title>The result must be of type swe:AnyDataPropertyType and it either has
						to contain exactly one element or an xlink:href attribute.</sch:title>
					<sch:rule context="//omx:CommonObservation">
						<sch:assert test="om:result/@xsi:type='swe:AnyDataPropertyType' ">xsi:Type
							of the result element must be swe:AnyDataPropertyType</sch:assert>
						<sch:assert
							test="count(om:result/*) = 1 or  count(om:result/*) = 0 and om:result/@xlink:href"
							>The result element must have exactly one child element or an xlink:href
							attribute.</sch:assert>
					</sch:rule>
				</sch:pattern>
			</appinfo>
			<documentation>Specialized Observation, in which the result is a record representing a
				multi-component phenomenon</documentation>
		</annotation>
	</element>-->
  <!-- ====================================================================== -->
  <!-- ===== Observation with SweCommon data types as result ====== -->
  <!-- ====================================================================== -->
  <element name="CommonObservation" type="om:ObservationType" substitutionGroup="om:Observation">
    <annotation>
      <appinfo>
        <sch:pattern>
          <sch:title>The result must contain one of the elements contained in the
						swe:AnyData group and nothing else.</sch:title>
          <sch:rule context="//omx:CommonObservation">
            <sch:assert test="om:result/swe:Count or om:result/swe:Quantity or om:result/swe:Time or om:result/swe:Boolean or 
							om:result/swe:Category or om:result/swe:Text or om:result/swe:QuantityRange or om:result/swe:CountRange or 
							om:result/swe:TimeRange or om:result/swe:ConditionalData or om:result/swe:ConditionalValue or 
							om:result/swe:DataRecord or om:result/swe:SimpleDataRecord or om:result/swe:Envelope or 
							om:result/swe:GeoLocationArea or om:result/swe:NormalizedCurve or om:result/swe:Position or 
							om:result/swe:Vector or om:result/swe:DataArray  or om:result/swe:Curve or om:result/swe:SquareMatrix">one of the elements contained in the swe:AnyData group must be present
							as child of om:result</sch:assert>
            <sch:assert test="count(om:result/*) = 1">exactly one child must be
						present</sch:assert>
          </sch:rule>
        </sch:pattern>
      </appinfo>
      <documentation>Specialized Observation, in which the result is a record representing a
				multi-component phenomenon</documentation>
    </annotation>
  </element>
  <!-- ====================================================================== -->
</schema>